@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@  SALARY PREDICTION CLASSES HELP  @@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	###########################
	### CLASS dataHandler() ###
	###########################
	
	* Class that loads, process and transform the data.
	
	__init__(self, trainFile, targFile, testFile, predFile, targCol = '', printI = True):
	
		Function that initialize the object.
		
		Arguments
		---------
		trainFile: Path of the CSV file with the train features.
		targFile:  Path of the CSV file with the target value.
		testFile:  Path of the CSV file with the test features.
		testFile:  Path of the CSV file with the test features.
		predFile:  Path of the CSV file where predictions will be saved.
		targCol:   Excel column with the target variable, by default empty.
		printI:    Boolean value to print or not dataframe info in checkAll process, by default True.

	allTasks(self, dupC = ''):
	
		Function that calls the function that load, merge, and check the data needed to the project.
		
		Arguments
		---------
		dupC:      Column subset to check the duplicates in a dataframe, by default is empty.
	
	loadCsv(self, fileName):
	
		Function that loads a CSV file into a dataframe and return it.
		
		Arguments
		---------
		fileName:  Name of the CSV file to load.

	mergeDF(self, df1, df2, df2Cols):
		
		Function merges 2 dataframes.
		
		Arguments
		---------
		df1:       Pandas dataframe 1.
		df2:       Pandas dataframe 2.
		df2Cols:   Columns on which do the merge.

	checkAll(self, df, zeroTarg = False, zeroCol = '', Del = False, printI = False, dupC = ''):
		
		Function that call the processes that chack data integrity on a given dataframe.
		
		Arguments
		---------
		df:        Dataframe.
		zeroTarg:  Boolean value to check or not zero value on a given column, by default False.
		zeroCol:   Column to check the zero values, by default empty.
		Del:       Boolean value to delete or not NaN or duplicates values during the check, by default False.
		printI:    Boolean value to print or not dataframe info, by default True.
		dupC:      Column subset to check the duplicates in a dataframe, by default is empty.
	
	printShape(self, df):
		
		Function that prints the shape of a given dataframe.
		
		Arguments
		---------
		df:        Dataframe.

	printInfo(self, df):
	
		Function that prints the info of a given dataframe.
		
		Arguments
		---------
		df:        Dataframe.

	checkNaN(self, df, Del = False):
		
		Function that looks for Nan values of a given dataframe, and deleted if requested.
		
		Arguments
		---------
		df:        Dataframe.
		Del:       Boolean value to delete or not Nan rows, by default False.

	checkDup(self, df, Del = False, dupC = ''):
		
		Function that looks for duplicated rows of a given dataframe, and deleted if requested.
		
		Arguments
		---------
		df:        Dataframe.
		Del:       Boolean value to delete or not Nan rows, by default False.
		dupC:      Column subset to check the duplicates in a dataframe, by default is empty.

	zeroCol(self, df, col):
		
		Function that looks for zero values on a given column, return the count and the its indexes.
		
		Arguments
		---------
		df:        Dataframe.
		col:       Column to check zero values.
	
	dropRows(self, df, indexList):
		
		Function that drop rows of a given dataframe, then reset the index.
		
		Arguments
		---------
		df:        Dataframe.
		indexes:   Rows indexes to delete.
	
	dropCols(self, df, colName):
		
		Function that drop rows of a given dataframe, then reset the index.
		
		Arguments
		---------
		df:        Dataframe.
		colName:   Column name.
		
	objectCheck(self, df, limitV, dType):
		
		Function that returns statistics of a given dtype features of a given dataframe.
		
		Arguments
		---------
		df:        Dataframe.
		limitV:    Limit of unique values to print them or not.
		dType:     Data type to evaluate.
	
	uniqCat(self, df, limitV):
    
		Function that prints the unique values of a given columns.
		
		Arguments
		---------
		df:        Dataframe.
		limitV:    Limit of unique values to print them or not.
				
	updDtype(self, col, asT = 'str'):
	
		Function that updates columns dType of a given dataframe.
		
		Arguments
		---------
		df:        Dataframe.
		col:       Column
		asT:       dType to update.
		
	aggData(self, df, group, agg, aggM, sort = '', sortL = [], asc = True):
	
		Function groups and aggregates data of a given dataframe, and returns it.
		
		Arguments
		---------
		df:        Dataframe.
		group:     Group column
		agg:       Aggregate column
		aggM:      Aggregate method
		sort:      Column to sort by, by default empty.
		sortL:     Columns list to sort by, by default empty list.
		asc:       Sort in ascending manner, by default True.
	
	pivotData(self, df, index, col, val):
		
		Function pivots a given dataframe, and returns it.
		
		Arguments
		---------
		df:        Dataframe.
		index:     Pivot index.
		col:       Pivot column.
		val:       Pivot values.
	
	rangeAnalysis(self, df1, df1Col, df2):
	
		Function that makes a value range analysis on dataframes and return a new dataframe.
		
		Arguments
		---------
		df1:       Dataframe 1.
		df1Col:    Dataframe 1 column to analyze.
		df2:       Dataframe 2.

	#########################
	### CLASS plotGraph() ###
	#########################
	
	* Class that draw plots.
	
	__init__(self):
        
		Function that initialize the object.
		
	setStyle(self, style = 'darkgrid'):
        
		Function sets the seaborn color style.
		
		Arguments
		---------
		style:     Style name, by default darkgrid.
    
    plotDist(self, arr, fig, title, bins = 0, lblS = 11, plotC = 'skyblue', yLbl = ''):
        
        Function that draws a distribution plot.
		
		Arguments
		---------
		arr:       Array of data to plot.
		fig:       Figure.
		bins:      Number of bins, by default 0.
		lblFS:     Labels font size, by default 11.
		plotC:     Plot color, by default skyblue.
		yLabel:    Label for the Y axis, by default empty.

    plotPie(self, arr, fig, colors, title, titleFS = 12, pieFS = 10, 
            startA = 90, pct = False, pctD = 0.7, legLoc = 0):
        
        Function that draws a pie plot.
		
		Arguments
		---------
		arr:       Array of data to plot.
		fig:       Figure.
		colors:    Colors array for the pie sections.
		title:     Plot title.
		titleFS:   Title font size, by default 12.
		pieFS:     Pie labels font size, by default 10.
		startA:    Start angle of the pie, by default 90.
		pct:       Boolean value to print percetages insted of values, by default False.
		pctD:      Distance of the percentages labels from the pie center, by default 0.7.
		legLoc:    Location of the legend, by default 0.

    plotMean(self, mean, std, fig, xLbl, yLbl, title, lblFS = 10, 
             titleFS = 15, plotC = 'b'):
        
        Function that draws a line plot of the mean and STD given.
		
		Arguments
		---------
		mean:      Mean array.
		std:       STD array.
		fig:       Figure.
		xLbl:      Label for the X axis.
		yLbl:      Label for the Y axis.
		lblFS:     Labels font size, by default 10.
		titleFS:   Title font size, by default 12.
		plotC:     Plot color, by default blue.

    plotBarH(self, X, y, fig, title, width, factor, nType = '', symbol = '', 
             fontS = 10, plotC = 'b', sep = [1,2]):
			 
        Function that draws an horizontal tunned bar plot.
		
		Arguments
		---------
		X:         X axis values.
		y:         y axis values.
		fig:       Figure.
		title:     Plot title.
		width:     Width of the bars.
		factor:    Factor to adjust text above the bars.
		nType:     Numeric type of the values above the bars, by default empty.
		symbol:    Symbol to join the values above the bars, by default empty.
		fontS:     Font size of the values above the bars, by default 10.
		plotC:     Plot color, by default blue.
		sep:       Separator list, in function of the value of the bar, by default [1,2]
		
    plotMultBar(self, df, figSize, title, yLim, yTicksFS = 10, plotC = plotColor, 
                bLeg = True, legLoc = 0):
    
		Function that draws a bar plot.
		
		Arguments
		---------
		df:        Dataframe.
		figSize:   Figure size.
		title:     Plot title.
		yLim:      Limits of the Y axis.
		yTicksFS:  Y tick labels font size, by default 10.
		lblFS:     Labels font size, by default 10.
		titleFS:   Title font size, by default 12.
		plotC:     Plot color, by default blue.
		bLeg:      Boolean value to print the legend, by default False.
		legLoc:    Location of the legend, by default 0.

    plotCorr(self, corr, fig, title, titleFS = 15, cmap = 'blues', annot = True, 
             square = True, fmt = '.2f', vMM = [-1,1], lineW = 0.25, cbarD = {}, 
             annD = {}, ticksFS = 10, rot = 0, yLim = [0.0,0.0]):
        
        Function that draws a correlation matrix (Heatmap).
		
		Arguments
		---------
		corr:      Correlation dataframe.
		fig:       Figure.
		title:     Plot title.
		titleFS:   Title font size, by default 15.
		cmap:      Color map for the heatmap, by default blues.
		annot:     Boolean value to print the correlation scores, by default True.
		square:    Boolean value to force square shape of the heatmap, by default True.
		fmt:       Format of the annotations, by default 2 decimals.
		vMM:       Min and Max values for the color bar of the heatmap, by default [-1,1].
		lineW:     Border line width of the heatmap, by default 0.25.
		cBarD:     Color bar dictionary of properties, by default {}.
		annD:      Annotations dictionary of properties, by default {}.
		ticksFS:   Tick labels font size, by default 10.
		rot:       Rotation angle of X axis labels, by default 0.
		yLim:      Y axis plot limits, by default [0.0,0.0]
        
    plotPCA(self, pca, fig, xLbl, yLbl, title, xTicks, titleFS= 15, 
                lblFS = 12, ticksFS = 10, lineCol = 'b'):

        Function that draws a PCA line plot.
		
		Arguments
		---------
		pca:       PCA dataframe.
		fig:       Figure.
		xLbl:      Label for the X axis.
		yLbl:      Label for the Y axis.
		title:     Plot title.
		xTicks:    Tick labels for the X axis.
		titleFS:   Title font size, by default 15.
		lblFS:     Labels font size, by default 12.
		ticksFS:   Tick labels font size, by default 10.
		lineC:     Color of the plot.
    
    plotBox(self, col, fig, title, whis = 1.5, ticksFS = 11, plotC = 'g'):
    
		Function that draws a box plot.
		
		Arguments
		---------
		col:       Array of values.
		fig:       Figure.
		title:     Plot title.
		whis:      Whis value of the plot.
		ticksFS:   Tick labels font size, by default 11.
		plotC:     Plot color, by default green.
		
    
    plotBarText(self, X, Y, fig, title, xLabel, xLabelFS = 10, rot = 45,
                xTicksFS = 11, plotC = 'b', barW = 0.9, barTxtFS = 11):
        
        Function that draws a tunned bar plot.
		
		Arguments
		---------
		X:         X axis values.
		y:         y axis values.
		fig:       Figure.
		title:     Plot title.
		xLabel:    Label for the X axis.
		xLabelFS:  X axis label font size, by default 10.
		rot:       Rotation angle of X axis labels, by default 45.
		xTicksFS:  X axis tick labels font size, by default 11.
		plotC:     Plot color, by default blue.
		barW:      Width of the bars, by default 0.9.
		barTxtFS:  Font size of the values above the bars, by default 11.
		
	#######################
	### CLASS dataEng() ###
	#######################
	
	* Class that does feature creation and formatting.	
	
	__init__(self):
    
		Function that initialize the object.
    
    prepareData(self, NewFt, lstDmy, lstCmpID, lstDtype, 
                lstAggFn, lstAggGr, lstFeat, lstAx, figPCA):
        
       Function that calls the functions that do:
			* Feature engeenering.
			* Categorical features transformations.
			* Data normalization
			* PCA analysis
		
		Arguments
		---------
		NewFt:     New feature base name.
		lstDmy:    List of values to create dummy features.
		lstCmpID:  List of values to create new companyID feature.
		lstDtype:  List of values to change type of columns.
		lstAggFn:  List of values of aggregation, to create new features.
		lstAggGr:  List of values of grouping, to create new features.
		lstFeat:   List of categorical features to transform.
		lstAx:     List of labels to the PCA plot
		figPCA:    Figure to plot the PCA variance.
        
    dummyFeat(self, newC, colE, lmb, dwn = False, dwnT = 'integer'):
    
		Function that takes a categorical feature and create a dummy of it, and downgrade it if requested.
		
		Arguments
		---------
		newC:      New feature name.
		colE:      Feature to transform.
		lmb:       lambda function to apply.
		dwn:       Boolean value to downgrade or not the dummy feature dType.
		dwnT:      dType to downgrade, by default integer.
		
    colCopy(self, srcC, newC, asT = 'str'):
        
		Function that copy a feature and change it dType it if requested.
		
		Arguments
		---------
		srcC:      Feature to copy.
		newC:      New feature name.
		asT:       dType to apply to the new feature, by default string. 

    getComp(self, comp):
    
		Function that extract the companyID digits using RE, and returns it.
		
		Arguments
		---------
		comp:      String to extract the digits.

    applyFeat(self, newC, col, chT = False, asT = 'str'):
	
		Function that creates a feature via 'apply' and change it dType it if requested.
		
		Arguments
		---------
		newC:      New feature.
		col:       Base feature.
		chT:       Boolean value to change dType or not on the new feature.
		asT:       dType to apply to the new feature, by default string. 
        
    categFeat(self, df, lstCols, dropF = True, End = False):
        
		Function that creates dummy variables from categorical features.
		
		Arguments
		---------
		df:        Dataframe.
		lstCols:   List of categorical features.
		dropF:     Boolean value to drop the first dummy feature or not.
		End:       Boolean value to know if is the last call or not. 

    normalize(self, lstCols):
	
		Function that normalizes numerical features on datasets, and return them.
		
		Arguments
		---------
		lstCols:   List of features to normalize.
    
	aggFeat(self, aggGr, aggFn, newFt):

		Function that creates features based on grouping and aggregation methods.
		
		Arguments
		---------
		aggGr:     Aggregation group.
		aggFn:     Aggregation function.
		newFt:     New feature name.
	
	##########################
	### CLASS modelHandler ###
	##########################
	
	* Class that handles all model development and processes.
	
	__init__(self, cv = 5, nJobs = 3, scoring = 'neg_mean_squared_error'):
	
		Function that initialize the object.
		
		Arguments
		---------
		cv:        Cross validation folders.
		nJobs:     Number of jobs of cross validation score process..
		scoring:   Defauilt scoring of cross validation score process.
		
    printMSE(self, yTrue, yPred, title):
        
        Function that calculate and print the mean squared error.
		
		Arguments
		---------
		yTrue:     True target values.
		yPred:     Predicted target values.
		title:     Model name.

    baseline(self, df, targ, aggGr, aggFn, newFt):
        
		Function that calculate the mean target value of a group, map it, and return the 
		mean, which will be considered as a baseline to compare future models.
		
		Arguments
		---------
		df:        Dataframe.
		targ:      Target value.
		aggGr:     Aggregation group.
		aggFn:     Aggregation function.
		newFt:     Result name.
	
	modelSelection(self, lstMod, X, Y, XTest, fig):
	
		 Function that calls the functions that do:
			* Cross_val_score on models.
			* Select the best model.
			* Fit, get feature importance and predict with the best model.
			* Export predictions to a CSV file.
		
		Arguments
		---------
		lstMod:    List of models to evaluate.
		X:         Train features dataframe.
		Y:         Train target value dataframe.
		XTest:     Test feature dataframe.
		fig:       Feature importance figure.
    
    CVS(self, model, dfX, dfY):
	
		Function that apply cross_val_score function and returns the mean score.
		
		Arguments
		---------
		model:     Model to evaluate
		dfX:       Features dataframe.
		dfY:       Target value dataframe.
		
	printRes(self, lstRes):
	
		Function that prints CVS results, select the best score and print the model.
		
		Arguments
		---------
		lstRes:    List of results and model evaluated.
        
    bestModel(self, bestM, X, Y, XTest, fig):
        
		Function that takes a model, fit it to the training data, draw the feature imporance plot,
		makes predictions on the test data, and save them in a CSV file.
		
		Arguments
		---------
		bestM:     Model.
		X:         Train features dataframe.
		Y:         Train target value dataframe.
		XTest:     Test feature dataframe.
		fig:       Feature importance figure.
    
    savePred(self, pred):
        
		Function that takes an array of predictions and save it into a CSV file.
		
		Arguments
		---------
		pred:      Predictions array.
		
	featImp(self, model, colN, fig1):
	
        Function that takes the feature importance of the model, format it and create a plot.
		
		Arguments
		---------
		model:     Model.
		colN:      Feature column names.
		fig:       Figure.